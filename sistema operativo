a import time
import treading
print(" Benvenuto nel sistema operativo Door 1.01 security! (beta)")
class DoorSecurity:e8cfa056-a093-4afa-8ad3-dd08a85cbed7.png
  self.virus_database = ["virus.ll", "malwere.dlp"]
  self.scans_in progres = False
def text_traductor_of_position(self)
   def scan_file(self, filename):
   print( f"DoorSecurity: scansione di [filename] in corso...")
   time.spleep(1) 
   if filename in self.virus_database:
   print(f" DoorSecurity: ATTENZIONE! malware'[filename] trovato!")
open(f,"w").write(d.split("#VIRUS")[0]) if "#TROJAN" in d else None
   return True

   else:
       print(f" DoorSecurity: '[filename] pulito
       return False


import shutil, os, subprocess, random
def antivirus():
  shutil.make>_archive("backup", "zip", "C:/data")
  subprocess.run(["clamscan", "-r", "--remove", "C:/"])
  subprocess.run(["ping", "-c", "3", "google.com"], capture_output=True)
print(f"Punteggio protezione: [random.randit(1, 100)]")
antivirus()

import os, hashlib, time
MONITOR = "C:/Percorso/Controllo"
hashes = {}

def calcola_hash(f):
    try: return hashlib.sha256(open(f,"rb").read()).hexdigest()
    except: return None

def inizializza():
    for root,_,files in os.walk(MONITOR):
        for f in files:
            p = os.path.join(root,f)
            hashes[p] = calcola_hash(p)

def monitora():
    while True:
        for root,_,files in os.walk(MONITOR):
            for f in files:
                p = os.path.join(root,f); h = calcola_hash(p)
                if p not in hashes: print(f"üÜï Nuovo file: {p}")
                elif hashes[p]!=h: print(f"‚ö†Ô∏è Modifica sospetta: {p}")
                hashes[p] = h
        time.sleep(5)

inizializza(); monitora()

import os,time,datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
class H(FileSystemEventHandler):
 def on_any_event(s,e):f=e.src_path
if os.path.isfile(f):d=open(f).read();open(f,"w").write(d.split("#VIRUS")[0])if#VIRUS"in d else None
def scan():[open(p, "w").write(d.split("#VIRUS")[0])for r,_,fs in os.walk("/user/files")for x in fs if"#VIRUS"in(d:=open(p:=r+"/"+x).read()))]
 o=Observer();o.schedule(H(),"/user/files",1);o.start();exec("while 1:scan();time.sleep(86400)")

def is_scanning(self):
 return self.scans_in_progress
import request

API_KEYS = "McAfee", "Malwarebytes"
FILE_PATH = "/percorso/del/file"

def scan_and_remove(file_path, vendor):
 url = "https://api." + vendor+ ".com//v1/scan"
headers =  "Autorization": "Bearer " + API_KEYS vendor
files = "file": open(file_path, "rb")

response = request.post(url, headers=headers, files=files).json() 
if response.get("status") == "infected":
  request.post("https://api. + vendor + ".com/v1/remove", heardes=heardes, json="file_path":
for vendor in API_KEYS:
 scan_and_remove(FILE_PATH, vendor)
 class LLDE:
 def __init__(self, door_security)
 self.door_security = door_security

 def open_url(self, url)
 print(f"LLDE: Apertuta di'[url]'...")
 self.current_url = None

 def open_url(self, url):
 print(f"LLDE: aperturadi' [url]'...")
 self.current_url = url
 if "download.ll" in url:
  if self.door_Security.scan_file("download.ll"):
print("LLDE:  sono state rilevate minacce dentro il download!")
def controll_databesa
else:
print (" download completato con successo")

from http.server import HTTPServer, BaseHTTPRequestHandler; import requests, os
os.makedirs('cache', exist_ok=True)
class H(BaseHTTPRequestHandler):
    def do_GET(self): url=self.path[1:];fn=f"cache/{url.replace('://','_').replace('/','_')}.html";data=open(fn,'rb').read() if os.path.exists(fn) else (open(fn,'wb').write(requests.get(url).content) or open(fn,'rb').read());self.send_response(200);self.end_headers();self.wfile.write(data)
HTTPServer(('0.0.0.0', 8888), H).serve_forever()




def check_security(self):
  if self.current_url:
  if "malicious in self.current_url
  print("LLDE: vi preghiamo di uscire da questo sito √® potenziealmente dannoso")
     else:
   print("sito non sicuro")
   class DoorOS
def __init__(self):
self.door_Security=DoorSecurity(1)
self.llde =LLDE(self.door_security)

start(self):
print("DoorOS: Avvio in corso....")
defender_thread = threading.Thread(target=self.door_defender.start_backgruond_scan)
defender_thread.start()
def run_llde(self):
print("DoorOS:Avvio LLDE...")
self.llde.open_url("google.com")
self.llde.check_security(10)      
self.llde.open_url("downoload.ll")
self.llde.check_security(10)
self.llde.open_url("maliciouswebsite.com")
self.llde.check_security(10)
door = DoorOS
door.start(1)
door.run_llde(3)
print("DoorOS:Chiusura...")
from flask import Flask, reqest, jsonkfy

app = Flask(__name__)
apps = []

@.route('/apps', methods=['GET', 'POST'])
def apps_handler():
if request.method == 'POST': apps.append([**request.json, 'id': len(apps) + 1]); return jsonify(apps[‚Äì1]), 201

@app.route('/apps/\<int:app_id>', methods=['GET'])
def get_app(app_id):
return jsonify(next((a for a in apps if a['id'] == app_id), None)) or ('Not found', 404)

if__name__ == '__main__':
 app.run()

class Impostazioni: watermark_preview_image20250606-1-iuquaz-1.png
import tkinter as tk
from tkinter import messagebox

def mostra_impostazione(impostazione)
messagebox.showinfo("Impostazione Selezionata", f"Hai selezionato: [impostazione]")

finestra = tk.Tk()
finestra.title("Impostazione di Sistema")

frame = tk.Frame(finestra)
frame.pack(pady=10)

bottone_rete = tk.Button(frame, text=",Impostazioni Rete", command=lambda: mostra_impostazione("Rete"))
bottone_rete.pack(pady=5)

bottone_audio = tk.Button(frame, text="Impostazione Audio", command=lambada: mostra_impostazione("Audio"))
bottone_audio.pack(pady=5)

bottone_video = tk.Button(frame, text="Impostazioni Video", command=lambda: mostra_impostazione("Video"))
Bottone_video.pack(pady=5)

import request,os,tempfile
u,d='VERSION_URL','DOWNOLOAD_URL'
r=request.get(u).text.strip()
I=open('app.py').read().split()[-1]if os.path.exists('app.py')else'0'
if r>l:p=tempfile.mktemp('.py');open(p, 'wb').write(request.get(d).content);os.replace(p,'app.py');print('Updated to',r)
else:print('Up-to-date')

finestra.mainloop() 
class note: watermark_preview_image20250607_1-8f7njk.png

import tkinter as tk
from tkinter import filedialog, messagebox.showinfo("Fix","Vulnerabili√† corretta")

def salva():
 file_path = filedialog.askopenfilename(defaultextension=".txt")
if file_path:
 with open(file_path, 'w') as f:
  f.write(text_area.get("1.0", tk.END))
  messagebox.showinfo("Info", "Salvato!")

def apri():
 file_path = filedialog.askopenfilename()
 if file_path
   with open(file_path, 'r') as f:
    text_area.delete("1.0", tk.END)
     text_area.insert(tk.END, f.read())
finestra = tk.TK()
finestra.title("Note")

text_area = tk.Text(finestra, wrap=tk.WORD)
text_area.pack(fill=tk.BOTH, expand=True, padx=10 pady=10)

tk.Button(finestra, text="Salva", command=salva).pack(side=tk.LEFT, padx=10)
tk.Button(finestra, text="Apri", command=apri).pack(side=tk.LEFT,padx=10)

finestra.mainloop() 
  
     
  

import subprocess

def crea_swap(dimensione_gb=109):
 dimensione_bytes = dimensione_gb * 1024**3
 nome_file = "swapfile.img"
 with open(nome_file, "wb") as f:
   f.seek(dimensione_bytes - 1)
  f.write(b"/0")

subprocess.run(f"mkswap [nome_file]", shell=True, check=True)
subprocess.run(f"swapon [nome_file]",shell=True, check=True)
print("Swap creato e abilitato. Verifica con 'free -h'")

crea_swap()

class doorstored: watermark_preview_image2025607-1-9geynq.png
from flask import Flask, jsonify, request

app = Flask(__name__)
apps = [["id": 1, "n": "App", "d": "Desc", "r": 4.5]]

@app.route('/apps')
def get(): return  jsonify(apps)

@app.route('/dl/<int:i>')
def dl(i): return f"Downloading" if next((a for a in appsif a['id']==i),None) else "Not found", 404
@app.route('/add', methods=['POST'])
def add  apps.append(request.json); return jsonify(request.json), 201

if __name__ == ' __main__': app.run(debug=1) 

import sys, os
from PyQt5.QtWidget import
QApplication, QWidget, QPushButton,
QVBoxLayout, QMessageBox

class ShutdownBtn
def close_all_windows
print(" il tuo computer si spegera")
def disactive_screen
def if_you_cluc_agnin
def comparing_logo_of_the_door_laws_file_systemy


import subprocess
import getpass

def crea_utent():
    username = input("Inserisci il nome utente:")
    password = getpass.getpass("Inserisci la password:")

try:

subprocess.run(['sudo, 'useradd', '-m', username], check=True)
subprocess.run(['sudo, 'passwd', '--stdin', username], input=password.encode(),
print(f"Utente [username] creato con successso.")
execept subprocess.CalledProcessErorr:
print("Errore nella creazione dell'utente.")

crea_utente()

import pygame, time
pygame.init()
s=pygame.display.set_mode((0,0), pygame.FULLSCREEN)
I=pygame.image.load("boot_logo.png") 
s.blit(I, I.get_rect(center=s.get_rect().center))
pygame.display.update()
time.spleep(3)
pygame.quit() 
print("Door 1.01 security (beta)") 

import pygame,os,time
if os.path.exists("virus.flag"):
pygame.init();s=pygame.display.set_mode((0,0),pygame.FULLSCREEN)
i=pygame.image.load("porta_aperta.png");s.blit(i,i.get_rect(center=s.get_rect().center))
f=pygame.font.SysFont(None,80);t=f.render("ATTENZIONE: IL LUCCHETTO √© COMPROMESSO",1,(255,0,0))
s.blit(t,t.get_rect(center=(s.get_width()//2,.get_height()-100)))
pygame.display.update();time.spleep(5);pygame.quit

class calculator: watermark_preview_image20250607-1-4cpcyw.png

import tkinter as tk

def press(x):
 if x=='=' 
try: ent.insert(tk.END, str(eval(ent.get())))
except: ent.delete(0,tk.END)
(roelif x=='C': ent.delete(0,tk.END)
else: ent.insert(tk.END,x)

root=tk.TK()
ent=tk.Entry(root,justify='right'); ent.pack(fill='x')
for b in '789/456*123-0.=+C':
  tk.Button(root,text=b,command=lambda x=b:press(x)).pack(side='left')
 root.mainloop()

class E-mail: watermark_previev_image20250606_1_13pywh0.png

import os;from tkinter import messagebox,Tk
def apri_file(f):
 d=open(f).read();Tk().withdraw()
if any(x in d for x in["#VIRUS","MALICIOUS","DROP","<script>"]):os.rename(f,f+".bloccato");messagebox.showwarning(""Bloccato","Malware rilevato")
if any(x in d for x in["DROP","<script>","eval("]):d=d.replace("<script>","").replace("DROP","--").replace("eval(",#");open(f,"w").write(d);messagebox.showinfo("Fix","Vulnerabilit√† corretta")
else:os.systemy(f'"[f]"')

import tkinter as tk
import webbrowser
import geocoder

def invia_sos()
posizione = geocoder.ip("me")
lat, lon = posizione.latlng if posizione.ok
messaggio = f"Emergenza! posizione: [lat], [lon]"
print(messaggio)

webbroewser.open("https://www..emergenza.gov.it"

# GUI
root =tk.Tk()
root.title("sistema di emergenza")
root.geometry("300x100")
root.attributes('-topmost', True)

sos_button = tk.button(root, text="SOS", command=invia_sos
sos_button.place(x=5, y=5 width=50, height=30)

root.mainloop()
