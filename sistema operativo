import time
import treading
print(" Benvenuto nel sistema operativo Door 1.01 (beta) security!")
class DoorSecurity:
 def__init__(self):
  self.virus_database = ["virus.ll", "malwere.dlp"]
  self.scans_in progres = False
def text_traductor_of_position(self)
   def scan_file(self, filename):
   print( f"DoorDefender : scansione di [filename] in corso...")
   time.spleep(1) 
   if filename in self.virus_database:
   print(f" DoorDefender: ATTENZIONE! Virus'[filename] trovato!")
   return True

   else:
       print(f" DoorDefender: '[filename] pulito
       return False

       def start_background_scan(self):
       self.scans_in progress = True
       print("DoorDefender: Scansione in background completata.")
       self.scans_in_progress = False

def is_scanning(self):
 return self.scans_in_progress

 class LLDE:
 def __init__(self, door_defender)
 self.door_defender = door_defender

 def open_url(self, url)
 print(f"LLDE: Apertuta di'[url]'...")
 self.current_url = None

 def open_url(self, url):
 print(f"LLDE: aperturadi' [url]'...")
 self.current_url = url
 if "download.ll" in url:
  if self.door_defender.scan_file("download.ll"):
print("LLDE: ci sono minacce dentro il download!")
else:
print (" download completato con successo")

def check_security(self):
  if self.current_url:
  if "malicious in self.current_url
  print("LLDE: vi preghiamo di uscire da questo sito è potenziealmente dannoso")
     else:
   print("sito non sicuro")
   class DoorOS
def __init__(self):
self.door_defender=DoorDefender(1)
self.llde =LLDE(self.door_defender)

start(self):
print("DoorOS: Avvio in corso....")
defender_thread = threading.Thread(target=self.door_defender.start_backgruond_scan)
defender_thread.start()
def run_llde(self):
print("DoorOS:Avvio LLDE...")
self.llde.open_url("google.com")
self.llde.check_security(10)      
self.llde.open_url("downoload.ll")
self.llde.check_security(10)
self.llde.open_url("maliciouswebsite.com")
self.llde.check_security(10)
door = DoorOS
door.start(1)
door.run_llde(3)
print("DoorOS:Chiusura...")
from flask import Flask, reqest, jsonkfy

app = Flask(__name__)
apps = []

@.route('/apps', methods=['GET', 'POST'])
def apps_handler():
if request.method == 'POST': apps.append([**request.json, 'id': len(apps) + 1]); return jsonify(apps[–1]), 201

@app.route('/apps/\<int:app_id>', methods=['GET'])
def get_app(app_id):
return jsonify(next((a for a in apps if a['id'] == app_id), None)) or ('Not found', 404)

if__name__ == '__main__':
 app.run()
class Impostazioni
import tkinter as tk
from tkinter import messagebox

def mostra_impostazione(impostazione)
messagebox.showinfo("Impostazione Selezionata", f"Hai selezionato: [impostazione]")

finestra = tk.Tk()
finestra.title("Impostazione di Sistema")

frame = tk.Frame(finestra)
frame.pack(pady=10)

bottone_rete = tk.Button(frame, text=",Impostazioni Rete", command=lambda: mostra_impostazione("Rete"))
bottone_rete.pack(pady=5)

bottone_audio = tk.Button(frame, text="Impostazione Audio", command=lambada: mostra_impostazione("Audio"))
bottone_audio.pack(pady=5)

bottone_video = tk.Button(frame, text="Impostazioni Video", command=lambda: mostra_impostazione("Video"))
bottone_video.pack(pady=5)

finestra.mainloop() 

import tkinter as tk
from tkinter import filedialog, messagebox

def salva():
 file_path = filedialog.askopenfilename(defaultextension=".txt")
if file_path:
 with open(file_path, 'w') as f:
  f.write(text_area.get("1.0", tk.END))
  messagebox.showinfo("Info", "Salvato!")

def apri():
 file_path = filedialog.askopenfilename()
 if file_path
   with open(file_path, 'r') as f:
    text_area.delete("1.0", tk.END)
     text_area.insert(tk.END, f.read())
finestra = tk.TK()
finestra.title("Note")

text_area = tk.Text(finestra, wrap=tk.WORD)
text_area.pack(fill=tk.BOTH, expand=True, padx=10 pady=10)

tk.Button(finestra, text="Salva", command=salva).pack(side=tk.LEFT, padx=10)
tk.Button(finestra, text="Apri", command=apri).pack(side=tk.LEFT,padx=10)

finestra.mainloop() 

import os

def scan_and_remove(directory):
  malware_extensions = ['.dlr','.bat', '.scr', '.com']
  for root, dirs, files in os.walk(directory):
   for file in files:
   if any(file.endswith(ext) for ext in malware_exetensions):
     os.remove(os.path.join(root, file))
   print(f"Rimosso: [file]")

scan_and_remove('/pathy/to/scan') 

import subprocess

def crea_swap(dimensione_gb=109):
 dimensione_bytes = dimensione_gb * 1024**3
 nome_file = "swapfile.img"
 with open(nome_file, "wb") as f:
   f.seek(dimensione_bytes - 1)
  f.write(b"/0")

subprocess.run(f"mkswap [nome_file]", shell=True, check=True)
subprocess.run(f"swapon [nome_file]",shell=True, check=True)
print("Swap creato e abilitato. Verifica con 'free -h'")

crea_swap()

class Store
from flask import Flask, jsonify, request

app = Flask(__name__)
apps = [["id": 1, "n": "App", "d": "Desc", "r": 4.5]]

@app.route('/apps')
def get(): return  jsonify(apps)

@app.route('/dl/<int:i>')
def dl(i): return f"Downloading" if next((a for a in appsif a['id']==i),None) else "Not found", 404
@app.route('/add', methods=['POST'])
def add(): apps.append(request.json); return jsonify(request.json), 201

if __name__ == ' __main__': app.run(debug=1) 

import sys, os
from PyQt5.QtWidget import
QApplication, QWidget, QPushButton,
QVBoxLayout, QMessageBox

class ShutdownBtn
def close_all_windows
print(" il tuo computer si spegera")
def disactive_screen
def if_you_cluc_agnin
def comparing_logo_of_the_door_laws_file_systemi
